<html>
<head>
<title>CGCursorIndex</title>
</head>
<body>
<p>Class <code><b>CGCursorIndex</b></code> can be used to create or use index by column for
<a href=cursor.htm>cursor</a> objects. To create or load index you should
use cursor's constructor. You is responsible for synchronization between
saved cursors/indexes. Synchronization between opened cursor/indexes will
done automatically.</p>
<p><b>Methods</b></p>
<a name=CGCursorIndex><p><code><font color=blue><b>CGCursorIndex</b>(CGCursor *pCursor, int iColumn, bool (_cdecl *pCallback)(long, long) = 0); </font></code><br>
<code><font color=blue><b>CGCursorIndex</b>(CGCursor *pCursor, const char *szFileName); </font></code><br>
Constructor creates (first variant) or loads from file (second variant) the index
for the <a href=cursor.htm><code>CGCursor</code></a> object. During execution
time cursor object is not related with any file. No synchronization
will file will be done automatically. You should use <code>save</code> method
to save modified cursor for future usage.<br>
Parameters
<table width=100%>
<tr><td valign=top><code><a href=cursor.htm>pCursor</a></code></td><td>Reference to cursor object, for which index
                                                            object should be created. Index
                                                            registers itself in cursor object
                                                            for synchronization.</td></tr>
<tr><td valign=top><code>iColumn</code></td><td>Index of the column, which should be indexed.</td></tr>
<tr><td valign=top><code>pCallback</code></td><td>Callback function, which can be used to tracking indexing process.
                                                  Function should have following form<br><code>bool _cdecl <i>IndexCallback</i>(long lCurrentRow, long lTotalRows)</code><br>
                                                  Function should return <code>false</code> to terminate indexing process.</td></tr>
<tr><td valign=top><code>szFileName</code></td><td>Name of file with previously saved index</td></tr>
</table>
Constructor can throw <a href=cursorex.htm>cursor exception</a>.
</p>
<a name=save><p><code><font color=blue>void <b>save</b>(const char *szFileName);</font></code><br>
Method saves current state of the index to specified file. Method can throw <a href=cursorex.htm>cursor exception</a>.</p>

<a name=go><p><code><font color=blue>void <b>go</b>(int iIndexRow);</font></code><br>
Method fetches row, which corresponds to specified index row in the associated
cursor object. Row index should greater than zero. Method can throw <a href=cursorex.htm>cursor exception</a>.</p>

<a name=seekForAbsRow><p><code><font color=blue>int <b>seekForAbsRow</b>(int iAbsRow)</font></code><br>
Method return index row (position of row in index) for specified row index in the associated cursor object.</p>

<p><a name=seekFor>
<code><font color=blue>int <b>seekForAbsRow</b>(int iAbsRow);</font></code><br>
<code><font color=blue>int <b>seekFor</b>(int iVal);</font></code><br>
<code><font color=blue>int <b>seekFor</b>(double dblVal);</font></code><br>
<code><font color=blue>int <b>seekFor</b>(const char *szValue, bool bExact);</font></code><br>
<code><font color=blue>int <b>seekFor</b>(const CGOdbcStmt::DATE *pVal);</font></code><br>
<code><font color=blue>int <b>seekFor</b>(const CGOdbcStmt::TIMESTAMP *pVal);</font></code><br>
<code><font color=blue>int <b>seekFor</b>(const GUID *pVal);</font></code><br>
Method searches specified value with help of index. Method returns first index row
in which value is found or -1 if value is not found.</p>
<p>&nbsp;<p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp;
</body>
</html>
