<html>
<head>
<title>CGOdbcStmt</title>
</head>
<body>
<p>Class <code><b>CGOdbcStmt</b></code> is responsible for work with ODBC's statements, including
work with static read-only cursors. This class supports LOB columns and LOB parameters without limit of the size.</p>
<p><b>Methods</b></p>
<a name=prepare><p><code><font color=blue>void <b>prepare</b>(const char *szSQL);</font></code><br>
The method prepares specified query to execution. You can bind parameters before
execution. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=execute><p><code><font color=blue>void <b>execute</b>(const char *szSQL);</font></code><br>
The method executes specified query. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=><p><code><font color=blue>void <b>execute</b>();</font></code><br>
The method executes previously prepared query. Prepared query can be executed more than once. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=setTimeOut><p><code><font color=blue>void <b>setTimeOut</b>(int iMilSecTimeout);</font></code><br>
The method sets timeout for further execute operations. If operation will be longer than specified timeout, statement will be canceled.</p>

<a name=toNative><p><code><font color=blue>void <b>toNative</b>(const char *szSQL, char *szBuff, int lBufMax);</font></code><br>
The method translates specified SQL code into native source SQL code. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=moreResults><p><code><font color=blue>bool <b>moreResults</b>();</font></code><br>
The method switches statement to working with results of next operator (if
more than one SQL operators was executed). Method return true if results of
next operator is available and <code>false</code> in other case.</p>

<a name=getRowCount><p><code><font color=blue>long <b>getRowCount</b>();</font></code><br>
The method returns number of rows affected by previously executed command or
number of rows in cursors (when cursor is already bound). But some data sources can't
return correct value of row count for cursor u,til <code>last</code> call.</p>

<a name=bindAuto><p><code><font color=blue>bool <b>bindAuto</b>();</font></code><br>
The method binds columns of result cursor. See also <a href=rules.htm>default rules of binding</a>. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=bindParamsAuto><p><code><font color=blue>bool <b>bindParamsAuto</b>();</font></code><br>
The method binds parameters of previously prepared statement cursor. Only MSSQL server
supports required functionality now to do this method. See also <a href=rules.htm>default rules of binding</a>.
Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=setParamNumber><p><code><font color=blue>void <b>setParamNumber</b>(int lParamCount);</font></code><br>
The method specifies number of parameters for manual binding. Each parameter
should be bound only once after call of this method.</p>

<a name=bindParam><p><code><font color=blue>void <b>bindParam</b>(int iParam, short iSqlType, short iSqlCType, int iBuffLen, unsigned long iSqlSize, short lPrec);</font></code><br>
The method binds parameter manually. See also <a href=rules.htm>default rules of binding</a>.
Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=cancel><p><code><font color=blue>bool <b>cancel</b>();</font></code><br>
The method cancels execution of the statement. This method can be called
from other thread. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=first><p><code><font color=blue>bool <b>first</b>();</font></code><br>
The method moves current row to first row of cursor. Method returns <code>true</code> if
current row is set and <code>false</code> in case of error.</p>

<a name=last><p><code><font color=blue>bool <b>last</b>();</font></code><br>
The method moves current row to last row of cursor. Method returns <code>true</code> if
current row is set and <code>false</code> in case of error.</p>

<a name=next><p><code><font color=blue>bool <b>next</b>();</font></code><br>
The method moves current row to next row of cursor. Method returns <code>true</code> if
current row is set and <code>false</code> in case of error.</p>

<a name=prev><p><code><font color=blue>bool <b>prev</b>();</font></code><br>
The method moves current row to previous row of cursor. Method returns <code>true</code> if
current row is set and <code>false</code> in case of error.</p>


<a name=go><p><code><font color=blue>bool <b>go</b>(int iRowNo);</font></code><br>
The method moves current row to specified row of cursor. Method returns <code>true</code> if
current row is set and <code>false</code> in case of error.</p>

<a name=skip><p><code><font color=blue>bool <b>skip</b>(int iRowsNumber);</font></code><br>
The method skips specified number of rows from current row of cursor. Method returns <code>true</code> if
current row is set and <code>false</code> in case of error.</p>

<a name=getRowNo><p><code><font color=blue>int <b>getRowNo</b>();</font></code><br>
The method returns number of current row. Number can have values from 1 to number of rows in cursor.</p>

<a name=getColCount><p><code><font color=blue>int <b>getColCount</b>();</font></code><br>
The method returns number of columns in cursor.</p>

<a name=findColumn><p><code><font color=blue>int <b>findColumn</b>(const char *szName);</font></code><br>
The method returns zero-based index of column or -1 if column is not found in cursor.</p>

<a name=getColumn><p><code><font color=blue>const <a href=column.htm>CGOdbcStmt::COLUMN</a> *<b>getColumn</b>(int iCol);</font></code><br>
The method returns description of the column by zero-based column index.</p>

<a name=getInt><p><code><font color=blue>int <b>getInt</b>(int iCol);<br>
int <b>getInt</b>(const char *szCol);</font></code><br>
The method returns integer value of the specified column. The method is applicable
for integer, numeric and character(non-blob) columns. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=getChar><p><code><font color=blue>const char *<b>getChar</b>(int iCol);<br>
const char *<b>getChar</b>(const char *szCol);</font></code><br>
Method returns string value of the specified column. The method is applicable
for all kinds of columns except SQL_C_BINARY datatypes. For non-character datatypes
internal buffer is used to create string presentation, therefore pointer to
buffer, returned for such kinds of column will be available only to next
call of the method. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=getLength><p><code><font color=blue>int <b>getLength</b>(int iCol);
<br>int <b>getLength</b>(const char *szCol);</font></code><br>
The method returns actual length of data in specified column. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=getPtr><p><code><font color=blue>const void *<b>getPtr</b>(int iCol);</font></code>
<br><code><font color=blue>const void *<b>getPtr</b>(const char *szCol);</font></code><br>
Method return pointer to data in specified column.

<a name=isNull><p><code><font color=blue>bool <b>isNull</b>(int iCol);</font></code><br>
<code><font color=blue>bool <b>isNull</b>(const char *szCol);</font></code><br>
Method returns <code>true</code> if columns has null value. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=getNumber><p><code><font color=blue>double <b>getNumber</b>(int iCol);</font></code><br>
<code><font color=blue>double <b>getNumber</b>(const char *szCol);</font></code><br>
Method returns numeric value of column. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=getDate><p><code><font color=blue>const <a href=datatype.htm>CGOdbcStmt::DATE</a> *<b>getDate</b>(int iCol);</font></code><br>
<code><font color=blue>const <a href=datatype.htm>CGOdbcStmt::DATE</a> *<b>getDate</b>(const char *szCol);</font></code><br>
Method returns value of date and datetime fields. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=getTimeStamp><p><code><font color=blue>const <a href=datatype.htm>CGOdbcStmt::TIMESTAMP</a> *<b>getTimeStamp</b>(int iCol);</font></code><br>
<code><font color=blue>const <a href=datatype.htm>CGOdbcStmt::TIMESTAMP</a> *<b>getTimeStamp</b>(const char *szCol);</font></code><br>
Method returns value of date and datetime fields. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=getGUID><p><code><font color=blue>const GUID *<b>getGUID</b>(int iCol);</font></code><br>
<code><font color=blue>const GUID *<b>getGUID</b>(const char *szCol);</font></code><br>
Method returns value of GUID fields. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=setInt><p><code><font color=blue>void <b>setInt</b>(int iParam, int iValue);</font></code><br>
Method should be used to set integer value to numeric parameters. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=setChar><p><code><font color=blue>void <b>setChar</b>(int iParam, const char *pParam);</font></code><br>
Method should be used to set character value to binary or character (including LOB) parameters. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=setBin><p><code><font color=blue>void <b>setBin</b>(int iParam, const void *pBin, int iLen);</font></code><br>
Method should be used to set value to binary (including LOB) parameters. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=setNumber><p><code><font color=blue>void <b>setNumber</b>(int iParam, double dblVal);</font></code><br>
Method should be used to set real value to numeric parameters. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=setDate><p><code><font color=blue>void <b>setDate</b>(int iParam, const <a href=datatype.htm>CGDateTime::DATE</a> *pDate);</font></code><br>
Method should be used to set value to date and datatime parameters. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=setTimeStamp><p><code><font color=blue>void <b>setTimeStamp</b>(int iParam, const <a href=datatype.htm>CGDateTime::TIMESTAMP</a> *pDate);</font></code><br>
Method should be used to set value to date and datatime parameters. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=setGUID><p><code><font color=blue>void <b>setGUID</b>(int iParam, const GUID *);</font></code><br>
Method should be used to set value to GUID parameters. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=setNull><p><code><font color=blue>void <b>setNull</b>(int iParam);</font></code><br>
Method should be used to set null value to all kinds of parameters. Method can throw <a href=excpt.htm>exception</a>.</p>

<a name=getStmt><p><code><font color=blue>HSTMT <b>getStmt</b>()</font></code><br>
Method returns statement handle.</p>

<p>&nbsp;<p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp; <p>&nbsp;

</body>
</html>
